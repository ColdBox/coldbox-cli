/**
 * Manage |entityPlural|
 * It will be your responsibility to fine tune this template, add validations, try/catch blocks, logging, etc.
 */
component extends="coldbox.system.EventHandler"{

	// DI Virtual Entity Service
	property name="ORMService" inject="entityService:|entity|";

	// HTTP Method Security
	this.allowedMethods = {
		index  = "GET",
		new    = "GET",
		edit   = "GET",
		delete = "POST,DELETE",
		save   = "POST,PUT"
	};

	/**
	 * Param incoming format, defaults to `html`
	 */
	function preHandler( event, rc, prc ){
		event.paramValue( "format", "html" );
	}

	/**
	 * Listing
	 */
	function index( event, rc, prc ){
		// Get all |entityPlural|
		prc.|entityPlural| = ORMService.getAll();
		// Multi-format rendering
		event.renderData( data=prc.|entityPlural|, formats="xml,json,html,pdf" );
	}

	/**
	 * New Form
	 */
	function new( event, rc, prc ){
		// get new |entity|
		prc.|entity| = ORMService.new();

		event.setView( "|entityPlural|/new" );
	}

	/**
	 * Edit Form
	 */
	function edit( event, rc, prc ){
		// get persisted |entity|
		prc.|entity| = ORMService.get( rc.|pk| );

		event.setView( "|entityPlural|/edit" );
	}

	/**
	 * View |entity| mostly used for RESTful services only.
	 */
	function show( event, rc, prc ){
		// Default rendering.
		event.paramValue( "format", "json" );
		// Get requested entity by id
		prc.|entity| = ORMService.get( rc.|pk| );
		// Multi-format rendering
		event.renderData( data=prc.|entity|, formats="xml,json" );
	}

	/**
	 * Save and Update
	 */
	function save( event, rc, prc ){
		// get |entity| to persist or update and populate it with incoming form
		prc.|entity| = populateModel(
			model                = ORMService.get( rc.|pk| ),
			exclude              = "|pk|",
			composeRelationships = true
		);

		// Do your validations here

		// Save it
		ORMService.save( prc.|entity| );

		// RESTful Handler
		switch(rc.format){
			// xml,json,jsont are by default.  Add your own or remove
			case "xml" : case "json" : case "jsont" :{
				event.renderData( data=prc.|entity|, type=rc.format, location="/|entityPlural|/show/#prc.|entity|.get|pk|()#" );
				break;
			}
			// HTML
			default:{
				// Show a nice notice
				flash.put( "notice", { message="|entity| Created", type="success" } );
				// Redirect to listing: change to `setNextEvent()` if using ColdBox <5
				relocate( '|entityPlural|' );
			}
		}
	}

	/**
	 * Delete
	 */
	function delete( event, rc, prc ){
		// Delete record by ID
		var removed = ORMService.delete( ORMService.get( rc.|pk| ) );

		// RESTful Handler
		switch( rc.format ){
			// xml,json,jsont are by default.  Add your own or remove
			case "xml" : case "json" : case "jsont" :{
				var restData = { "deleted" = removed };
				event.renderData( data=restData, type=rc.format );
				break;
			}
			// HTML
			default:{
				// Show a nice notice
				flash.put( "notice", { message="|entity| Poofed!", type="success" } );
				// Redirect to listing: change to `setNextEvent()` if using ColdBox <5
				relocate( '|entityPlural|' );
			}
		}
	}

}
